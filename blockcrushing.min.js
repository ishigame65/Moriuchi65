const GameIs={Init:"Init",Start:"Started",Over:"Over",Stop:"Stopped"},CrusherIs={Alive:"\u751f\u5b58",Dead:"\u6b7b\u4ea1"},BlockIs={Init:"\u521d\u671f\u72b6\u614b",Falling:"\u964d\u4e0b\u4e2d",Stacked:"\u7a4d\u307e\u308c\u305f"};
class Crusher{constructor(){this.keyRepeat=null;this.x=0;this.y=20;this.blockHeight=this.blockWidth=0;this.blockStackList=null;this.step=3;this.canCrush=!1;this.xpos=this.score=0;this.status=CrusherIs.Alive;this.rightCount=this.leftCount=0;this.divScore=document.querySelector("#SCORE")}toString(){return"[object Crusher]"}updateModel(a){const b=this.blockWidth,d=this.blockHeight;var e=this.x+3,g=this.x+b-5-3;this.xpos=Math.trunc((this.x+b/2)/b);this.blockStackList[this.xpos].getStackNum();var f=this.blockStackList[Math.trunc(e/
b)].getStackNum();let h=this.blockStackList[Math.trunc(g/b)].getStackNum();var c=Math.trunc((e-b/2)/b);e=999;0<=c&&(e=this.blockStackList[c].getStackNum());c=Math.trunc((g+b/2)/b);g=999;c<this.blockStackList.length&&(g=this.blockStackList[c].getStackNum());c=a.height-(f>h?f:h)*d;const k=this.keyRepeat;let l=!1,m=!1;k.isLeft&&this.x>this.step&&(f>=e?(this.x-=this.step,this.leftCount++,this.canCrush=!0):1>=e-f&&(20<this.leftCount&&0<=this.xpos-2&&this.blockStackList[this.xpos-2].getStackNum()==f&&(f=
this.blockStackList[this.xpos-1].pop(),f.xpos--,this.blockStackList[this.xpos-2].push(f),this.leftCount=0),l=!0),this.rightCount=0);k.isRight&&this.x<a.width-b-this.step&&(h>=g?(this.x+=this.step,this.rightCount++,this.canCrush=!0):1>=g-h&&(20<this.rightCount&&this.xpos+2<this.blockStackList.length&&this.blockStackList[this.xpos+2].getStackNum()==h&&(a=this.blockStackList[this.xpos+1].pop(),a.xpos++,this.blockStackList[this.xpos+2].push(a),this.rightCount=0),m=!0),this.leftCount=0);k.isUp&&this.y>
d&&(l?this.y>=c-d&&(this.y-=d,this.x-=b/2,this.canCrush=!0):m?this.y>=c-d&&(this.y-=d,this.x+=b/2,this.canCrush=!0):this.y>=c&&(this.y-=this.step),this.rightCount=this.leftCount=0);k.isDown&&(0<this.blockStackList[this.xpos].getStackNum()&&this.canCrush&&(this.blockStackList[this.xpos].pop(),c-=d,this.canCrush=!1,this.score++),this.y<c&&(this.y+=this.step),this.rightCount=this.leftCount=0);this.y<c&&(this.y+=4)}updateView(a){const b=this.blockWidth/2-2,d=this.blockHeight/2-2;CrusherIs.Alive==this.status?
a.fillText("\ud83d\udc22",this.x-b,this.y-d):(a.fillStyle="rgb(255, 128, 0)",a.fillText("\u2715",this.x,this.y-d+5));this.divScore.innerText=`Score: ${this.score}`}}const KEY={RIGHT:39,UP:38,LEFT:37,DOWN:40};
class KeyRepeat{constructor(){this.isDown=this.isLeft=this.isUp=this.isRight=!1}toString(){return"[object KeyRepeat]"}onkeydown(a){a.preventDefault();switch(a.keyCode){case KEY.RIGHT:this.isRight=!0;break;case KEY.UP:this.isUp=!0;break;case KEY.LEFT:this.isLeft=!0;break;case KEY.DOWN:this.isDown=!0}}onkeyup(a){a.preventDefault();switch(a.keyCode){case KEY.RIGHT:this.isRight=!1;break;case KEY.UP:this.isUp=!1;break;case KEY.LEFT:this.isLeft=!1;break;case KEY.DOWN:this.isDown=!1}}}
class Block{constructor(){this.y=this.xpos=0;this.speed=1;this.blockHeight=this.blockWidth=0;this.blockStack=null;this.status=BlockIs.Init;this.crusher=null}toString(){return"[object Block]"}updateModel(a){let b=this.blockStack.getStackNum();this.y<a.height-b*this.blockHeight?(this.y+=this.speed,this.status=BlockIs.Falling):this.status==BlockIs.Falling&&(this.status=BlockIs.Stacked,null!=this.crusher&&this.xpos==this.crusher.xpos&&(this.crusher.status=CrusherIs.Dead))}updateView(a){a.fillText("\u25a1",
this.xpos*this.blockWidth,this.y)}}
class BlockStack{constructor(){this.blockStack=[]}toString(){return"[object BlockStack]"}push(a){this.blockStack.push(a)}pop(){let a=null;var b=this.blockStack.length;if(0<b)switch(this.blockStack[b-1].status){case BlockIs.Stacked:a=this.blockStack.pop();break;case BlockIs.Falling:1<b&&(b=this.blockStack.pop(),a=this.blockStack.pop(),this.blockStack.push(b));break;default:console.log("\u5185\u90e8\u30a8\u30e9\u30fc(BlockStack.pop)")}return a}getStackNum(){let a=this.blockStack.length;0<a&&BlockIs.Falling==
this.blockStack[a-1].status&&a--;return a}clear(){let a=this.blockStack.length;for(;0<a--;)this.blockStack.pop()}updateModel(a){for(var b of this.blockStack)b.updateModel(a);b=this.blockStack.length;if(1<b){a=a.height;for(let d=0;d<b-1;d++){const e=this.blockStack[d];e.y=a;a-=e.blockHeight}}}updateView(a){for(const b of this.blockStack)b.updateView(a)}}let app=null;
class App{constructor(){this.canvas=null;this.canvasWidth=400;this.canvasHeight=160;this.timer=null;this.timerTickness=20;this.blockXnum=this.blockHeight=this.blockWidth=this.timerCounter=0;this.crusher=this.blockStackList=null;this.status=GameIs.Init;this.blockInterval=80;this.divHistory=this.divInterval=null;this.level=.2;this.crusherSpeed=3}toString(){return"[object App]"}init(){console.log(`#App.init() this=${this}`);const a=document.querySelector("#CANVAS1");this.canvas=a;a.width=this.canvasWidth;
a.height=this.canvasHeight;this.divInterval=document.querySelector("#INTERVAL");this.divHistory=document.querySelector("#HISTORY")}clear(){if(null!=this.blockStackList){for(const a of this.blockStackList)a.clear();this.blockStackList=null}null!=this.crusher&&(this.crusher=null)}start(){const a=this.canvas;this.status==GameIs.Start&&this.stop();this.status!=GameIs.Init&&this.clear();this.blockInterval=80;this.divInterval.innerText=`\u30d6\u30ed\u30c3\u30af\u751f\u6210\u9593\u9694: ${this.blockInterval}`;
var b=document.querySelector("input[name='LEVEL']:checked").value;this.level=parseFloat(b);b=document.querySelector("input[name='SPEED']:checked").value;this.crusherSpeed=parseInt(b);b=a.getContext("2d");b.font="24px Roboto, medium";b.shadowColor="#666";b.shadowBlur=4;b.shadowOffsetX=3;b.shadowOffsetY=2;b.fillStyle="rgb(0, 128, 255)";b=b.measureText("\u25a1");this.blockWidth=b.actualBoundingBoxLeft+b.actualBoundingBoxRight;this.blockHeight=b.actualBoundingBoxAscent+b.actualBoundingBoxDescent;this.blockXnum=
Math.trunc(a.width/this.blockWidth);this.blockYnum=Math.trunc(a.height/this.blockWidth);this.blockStackList=Array(this.blockXnum);for(b=0;b<this.blockXnum;b++)this.blockStackList[b]=new BlockStack;const d=new KeyRepeat;window.addEventListener("keydown",e=>d.onkeydown(e));window.addEventListener("keyup",e=>d.onkeyup(e));this.crusher=this.createCrusher(d,a.width/2,a.height,this.blockWidth,this.blockHeight,this.blockStackList,this.crusherSpeed);clearInterval(this.timer);this.timer=setInterval("app.timerInterrupt()",
this.timerTickness);this.status=GameIs.Start}canvasMessage(a){const b=this.canvas;b.getContext("2d").fillText(a,b.width/3,b.height/2+this.blockHeight/2)}stop(){this.status=GameIs.Stop;this.canvasMessage("Game Stopped");clearInterval(this.timer);this.outHistory(`${nowDateTimeString()}  Score: ${this.crusher.score}`)}timerInterrupt(){this.timerCounter++;this.updateView()}updateView(){const a=this.canvas;if(this.status==GameIs.Over)this.canvasMessage("Game Over"),clearInterval(this.timer),this.outHistory(`${nowDateTimeString()}  Score: ${this.crusher.score}`);
else{for(var b of this.blockStackList)b.updateModel(a);this.crusher.updateModel(a);if(this.timerCounter>this.blockInterval){b=Math.trunc(Math.random()*this.blockXnum);const d=this.createBlock(b,10,Math.trunc(2*Math.random())+1,this.blockWidth,this.blockHeight,this.blockStackList[b],this.crusher);this.blockStackList[b].push(d);this.blockStackList[b].getStackNum()>this.blockYnum&&(this.status=GameIs.Over);this.timerCounter=0;10<this.blockInterval&&Math.random()<this.level&&(this.blockInterval--,this.divInterval.innerText=
`\u30d6\u30ed\u30c3\u30af\u751f\u6210\u9593\u9694: ${this.blockInterval}`)}b=a.getContext("2d");b.clearRect(0,0,a.width,a.height);for(const d of this.blockStackList)d.updateView(b);this.crusher.updateView(b);CrusherIs.Dead==this.crusher.status&&(this.status=GameIs.Over)}}outHistory(a){const b=this.divHistory;b.value+=a+"\n";b.scrollTop=b.scrollHeight}createBlock(a,b,d,e,g,f,h){const c=new Block;c.xpos=a;c.y=b;c.speed=d;c.blockWidth=e;c.blockHeight=g;c.blockStack=f;c.crusher=h;return c}createCrusher(a,
b,d,e,g,f,h){const c=new Crusher;c.keyRepeat=a;c.x=b;c.y=d;c.blockWidth=e;c.blockHeight=g;c.blockStackList=f;c.step=h;return c}}window.addEventListener("load",a=>{app=new App;app.init()});function nowDateTimeString(){var a=new Date;const b=a.getFullYear(),d=("00"+(a.getMonth()+1)).slice(-2),e=("00"+a.getDate()).slice(-2),g=("00"+a.getHours()).slice(-2),f=("00"+a.getMinutes()).slice(-2);a=("00"+a.getSeconds()).slice(-2);return`${b}/${d}/${e} ${g}:${f}:${a}`};
